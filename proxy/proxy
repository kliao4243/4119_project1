#! /usr/bin/env python
import sys
import select
import time
import re
from socket import socket, AF_INET, SOCK_STREAM
import thread

# Take arguments port number and ip addesses through sys.argv.

# Convert listen_port to Integer.
listen_port = int(sys.argv[1])
fake_ip = sys.argv[2]
server_ip = sys.argv[3]


# This function take charges of almost all functionalities. The reason why I encapsulate all these in a function will be explained later
def proxy_listen():

    # Create TCP socket. This socket is used to listen from clients.
    s = socket(AF_INET, SOCK_STREAM)

    # Create another TCP socket. This socket takes charge of the communication between proxy and server.
    socket_outbound = socket(AF_INET, SOCK_STREAM)
    socket_outbound.bind((fake_ip, 0))
   
    # Accept connection from client. Any IP address at the listening port would be accepted.
    try:
        s.bind(('', listen_port))
        s.listen(1)
        socket_listen, address = s.accept()
    except Exception:
        s.close()
        socket_outbound.close()
        return

    # After establishing connection to client, try to connect the server. If the server with server_ip is currently not available, tell the client and return.
    try:
        socket_outbound.connect((server_ip, 8080))
    except Exception:
        print "Server not available now. Try later"
        s.close()
        socket_outbound.close()
        socket_listen.close()
        return

    # If both connections are established, keep the connections until either client or server terminate their connections.
    while 1:

        # Set the buffer size to be 1024 bytes
        data = socket_listen.recv(1024)  

        # Forward the message sent by clients only when its length is larger than 0. Otherwise, the connection to clients has been closed.
        if len(data) > 0:

            # Try to send data to the server. If fails, the connection to server has been closed.
            try:
                socket_outbound.send(data)
            except Exception:
                print "Connection to server was terminated.\nDisconnect the client"
                socket_listen.close()
                s.close()
                socket_outbound.close()
                return

            # Receive data from server. If fails, the connection to server has been closed.
            try:
                reply = socket_outbound.recv(1024)
            except Exception:
                print "Connection to server was terminated.\nDisconnect the client"
                socket_listen.close()
                s.close()
                socket_outbound.close()
                return

            # Forward the message sent by servers only when its length is larger than 0. Otherwise, the connection to servers has been closed.
            if len(reply) > 0:
                try:
                    socket_listen.send(reply)
                except Exception:
                    print "Connection to client was terminated.\nDisconnect the server"
                    socket_outbound.close()
                    s.close()
                    socket_listen.close()
                    return
            else:
                print "Connection to server was terminated.\nDisconnect the client"
                socket_listen.close()
                s.close()
                socket_outbound.close()
                return

        # If the connection is disconnected by the client, connect to the next client.
        else:
            print "Connection to client was terminated.\nDisconnect the server"
            socket_outbound.close()
            socket_listen.close()
            s.close()
            return

''' Call the proxy_listen function in a while loop, such that if client close the connection, the proxy can listen to another client, if the server shut down, the proxy
can inform the client and continue working when the server recovers.'''
while True:
    proxy_listen()

